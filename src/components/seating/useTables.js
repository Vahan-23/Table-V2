import { useCallback } from 'react';
import { useSeating } from './SeatingContext';
import { useTranslations } from './useTranslations';
import { useGroups } from './useGroups';

export const useTables = () => {
  const { state, dispatch, actions } = useSeating();
  const { hallData } = state;
  const { t } = useTranslations();
  const { getGroupStatus } = useGroups();

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—Ç –∑–∞ —Å—Ç–æ–ª–æ–º
  const getAvailableSeats = useCallback((tableId) => {
    const table = hallData?.tables?.find(t => t.id === tableId);
    if (!table) return 0;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ —Å—Ç–æ–ª
    if (table.enabled === false) return 0;

    const chairCount = table.chairCount || (table.chairs ? table.chairs.length : 12);
    const occupiedSeats = table.people ? table.people.filter(person => person !== null && person !== undefined).length : 0;
    
    return chairCount - occupiedSeats;
  }, [hallData]);

  // –†–∞—Å—Å–∞–¥–∫–∞ –≥—Ä—É–ø–ø—ã –∑–∞ —Å—Ç–æ–ª–æ–º
  const seatGroupAtTable = useCallback((groupId, tableId, selectedPeople = null) => {
    console.log('seatGroupAtTable –≤—ã–∑–≤–∞–Ω–∞ —Å:', { groupId, tableId, selectedPeople });
    
    const group = state.groups.find(g => g.id === groupId);
    console.log('–ù–∞–π–¥–µ–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞:', group);
    
    if (!group) {
      alert('–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ—Ä–∞—Å—Å–∞–∂–µ–Ω–Ω—ã—Ö –ª—é–¥–µ–π –∏–∑ –≥—Ä—É–ø–ø—ã
    const getUnseatedPeopleFromGroup = (groupId) => {
      const seatedPeople = [];
      hallData?.tables?.forEach(table => {
        if (table.people) {
          table.people.forEach(person => {
            if (person && person.groupId === groupId) {
              seatedPeople.push(person.name);
            }
          });
        }
      });
      
      return group.members.filter(member => !seatedPeople.includes(member));
    };

    const peopleToSeat = selectedPeople || getUnseatedPeopleFromGroup(groupId);

    if (peopleToSeat.length === 0) {
      alert('–ì—Ä—É–ø–ø–∞ –ø—É—Å—Ç–∞—è!');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ —Å—Ç–æ–ª
    const table = hallData?.tables?.find(t => t.id === tableId);
    if (table && table.enabled === false) {
      alert(t('tableDisabledError'));
      return;
    }

    const availableSeatsCount = getAvailableSeats(tableId);

    if (availableSeatsCount < peopleToSeat.length) {
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª—é–¥–µ–π
      dispatch({ type: actions.SET_SHOW_SEATING_MODAL, payload: true });
      dispatch({ type: actions.SET_SELECTED_GROUP_FOR_SEATING, payload: groupId });
      dispatch({ type: actions.SET_TARGET_TABLE_FOR_SEATING, payload: tableId });
      dispatch({ type: actions.SET_AVAILABLE_SEATS_FOR_SEATING, payload: availableSeatsCount });
      return;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª—é–¥–µ–π –∑–∞ —Å—Ç–æ–ª–æ–º
    const updatedTables = hallData.tables.map(table => {
      if (table.id === tableId) {
        const updatedPeople = [...(table.people || [])];
        let seatIndex = 0;

        peopleToSeat.forEach((memberName) => {
          // –ù–∞—Ö–æ–¥–∏–º —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ
          while (seatIndex < updatedPeople.length && updatedPeople[seatIndex] !== null && updatedPeople[seatIndex] !== undefined) {
            seatIndex++;
          }
          
          if (seatIndex < updatedPeople.length) {
            updatedPeople[seatIndex] = {
              name: memberName,
              groupId: groupId,
              isMainGuest: true
            };
            seatIndex++;
          }
        });

        return {
          ...table,
          people: updatedPeople
        };
      }
      return table;
    });

    const updatedHallData = {
      ...hallData,
      tables: updatedTables
    };

    dispatch({ type: actions.SET_HALL_DATA, payload: updatedHallData });
    localStorage.setItem('hallData', JSON.stringify(updatedHallData));

    // –£–¥–∞–ª—è–µ–º —Ä–∞—Å—Å–∞–∂–µ–Ω–Ω—ã—Ö –ª—é–¥–µ–π –∏–∑ –≥—Ä—É–ø–ø—ã
    const updatedGroups = state.groups.map(g => {
      if (g.id === groupId) {
        const newMembers = g.members.filter(member => !peopleToSeat.includes(member));
        console.log(`ü™ë –†–ê–°–°–ê–ñ–ê–ï–ú: ${g.name} - –±—ã–ª–æ ${g.members.length} –ª—é–¥–µ–π, —Å—Ç–∞–ª–æ ${newMembers.length}`);
        return {
          ...g,
          members: newMembers
        };
      }
      return g;
    });

    dispatch({ type: actions.SET_GROUPS, payload: updatedGroups });
    localStorage.setItem('seatingGroups', JSON.stringify(updatedGroups));
    // localStorage.setItem('seatingGroups', JSON.stringify(updatedGroups));

    // –°–±—Ä–æ—Å –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    dispatch({ type: actions.RESET_MODALS });
  }, [state.groups, hallData, getAvailableSeats, dispatch, actions]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —Å—Ç—É–ª—É
  const handleChairClick = useCallback((tableId, chairIndex) => {
    dispatch({ 
      type: actions.SET_SELECTED_CHAIR, 
      payload: { tableId, chairIndex } 
    });

    const table = hallData?.tables?.find(t => t.id === tableId);
    if (table && table.people && table.people[chairIndex]) {
      // –ï—Å–ª–∏ —Å—Ç—É–ª –∑–∞–Ω—è—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –≥–æ—Å—Ç—è
      dispatch({ 
        type: actions.SET_PERSON_NAME, 
        payload: table.people[chairIndex].name || '' 
      });
      dispatch({ 
        type: actions.SET_SELECTED_GROUP, 
        payload: table.people[chairIndex].groupId || '' 
      });
    } else {
      // –ï—Å–ª–∏ —Å—Ç—É–ª —Å–≤–æ–±–æ–¥–µ–Ω - –≥–æ—Ç–æ–≤–∏–º –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≥–æ—Å—Ç—è
      dispatch({ type: actions.SET_PERSON_NAME, payload: '' });
      dispatch({ type: actions.SET_SELECTED_GROUP, payload: '' });
    }

    dispatch({ type: actions.SET_SHOW_PERSON_MODAL, payload: true });
  }, [hallData, dispatch, actions]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —Å—Ç–æ–ª—É
  const handleTableClick = useCallback((e, table) => {
    e.stopPropagation();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ –≤—ã–±–æ—Ä–∞ —Å—Ç–æ–ª–∞ –¥–ª—è —Ä–∞—Å—Å–∞–¥–∫–∏ –≥—Ä—É–ø–ø—ã
    if (state.isTableSelectionMode && state.selectedGroupForSeating) {
      const group = state.groups.find(g => g.id === state.selectedGroupForSeating);
      if (group) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞ –∑–∞ —Å—Ç–æ–ª–æ–º
        const occupiedSeats = table.people?.filter(person => person).length || 0;
        const availableSeats = table.chairCount - occupiedSeats;
        
        if (availableSeats === 0) {
          dispatch({ 
            type: actions.SET_NOTIFICATION, 
            payload: {
              type: 'error',
              message: t('tableFullyOccupied')
            }
          });
          return;
        }

        if (availableSeats < group.members.length) {
          // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª—é–¥–µ–π –≤–º–µ—Å—Ç–æ –ø–æ–∫–∞–∑–∞ –æ—à–∏–±–∫–∏
          dispatch({ type: actions.SET_SHOW_SEATING_MODAL, payload: true });
          dispatch({ type: actions.SET_SELECTED_GROUP_FOR_SEATING, payload: group.id });
          dispatch({ type: actions.SET_TARGET_TABLE_FOR_SEATING, payload: table.id });
          dispatch({ type: actions.SET_AVAILABLE_SEATS_FOR_SEATING, payload: availableSeats });
          return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ä–∞—Å—Å–∞–∂–µ–Ω–∞ –ª–∏ —É–∂–µ –≤—Å—è –≥—Ä—É–ø–ø–∞
        const status = getGroupStatus(group);
        if (status.isFullySeated) {
          dispatch({ 
            type: actions.SET_NOTIFICATION, 
            payload: {
              type: 'warning',
              message: t('groupAlreadyFullySeated')
            }
          });
          return;
        }

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å–∞–∂–∏–≤–∞–µ–º –≤—Å—é –≥—Ä—É–ø–ø—É –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–æ–ª
        seatGroupAtTable(state.selectedGroupForSeating, table.id, group.members);
        
        // –û—Ç–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ —Å—Ç–æ–ª–∞
        dispatch({ type: actions.SET_TABLE_SELECTION_MODE, payload: false });
        dispatch({ type: actions.SET_SELECTED_GROUP_FOR_SEATING, payload: null });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π —Ä–∞—Å—Å–∞–¥–∫–µ
        dispatch({ 
          type: actions.SET_NOTIFICATION, 
          payload: {
            type: 'success',
            message: `${t('groupSeatedSuccessfully')} "${group.name}" ${t('atTable')} ${table.name || table.id}`
          }
        });
        return;
      }
    }
    
    // –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π —Å—Ç–æ–ª–∞
    dispatch({ type: actions.SET_SELECTED_TABLE, payload: table });
    dispatch({ type: actions.SET_SHOW_TABLE_DETAILS_MODAL, payload: true });
  }, [dispatch, actions, state.isTableSelectionMode, state.selectedGroupForSeating, state.groups, seatGroupAtTable, t, getGroupStatus]);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞ –∑–∞ —Å—Ç–æ–ª–æ–º
  const savePerson = useCallback(() => {
    if (!state.personName.trim()) {
      dispatch({ 
        type: actions.SET_NOTIFICATION, 
        payload: {
          type: 'error',
          message: '–í–≤–µ–¥–∏—Ç–µ –∏–º—è!'
        }
      });
      return;
    }

    const { tableId, chairIndex } = state.selectedChair;
    const currentPersonOnChair = hallData?.tables?.find(t => t.id === tableId)?.people?.[chairIndex];

    // –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º –≥—Ä—É–ø–ø—ã –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —á–µ–ª–æ–≤–µ–∫–∞
    // –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≥—Ä—É–ø–ø—ã
    // const updatedGroups = state.groups.map(group => {
    //   let updatedGroup = { ...group };

    //   if (currentPersonOnChair &&
    //     currentPersonOnChair.groupId === group.id &&
    //     currentPersonOnChair.name !== state.personName.trim()) {
    //     updatedGroup = {
    //       ...updatedGroup,
    //       members: [...updatedGroup.members, currentPersonOnChair.name]
    //     };
    //   }

    //   if (state.selectedPersonFromGroup && state.selectedPersonFromGroup.groupId === group.id) {
    //     updatedGroup = {
    //       ...updatedGroup,
    //       members: updatedGroup.members.filter(member => member !== state.selectedPersonFromGroup.name)
    //     };
    //   }

    //   return updatedGroup;
    // });

    // dispatch({ type: actions.SET_GROUPS, payload: updatedGroups });
    // localStorage.setItem('seatingGroups', JSON.stringify(updatedGroups));

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª—é–¥–µ–π –∑–∞ —Å—Ç–æ–ª–æ–º
    const updatedTables = hallData.tables.map(t => {
      if (t.id === tableId) {
        const tablePeople = [...(t.people || [])];

        tablePeople[chairIndex] = {
          name: state.personName.trim(),
          groupId: state.selectedGroup,
          isMainGuest: true
        };

        return {
          ...t,
          people: tablePeople
        };
      }
      return t;
    });

    const updatedHallData = {
      ...hallData,
      tables: updatedTables
    };

    dispatch({ type: actions.SET_HALL_DATA, payload: updatedHallData });
    localStorage.setItem('hallData', JSON.stringify(updatedHallData));

    // –°–±—Ä–æ—Å –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    dispatch({ type: actions.RESET_MODALS });
  }, [state, hallData, dispatch, actions]);

  // –£–¥–∞–ª–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞ —Å–æ —Å—Ç–æ–ª–∞
  const removePerson = useCallback(() => {
    const { tableId, chairIndex } = state.selectedChair;
    const currentPerson = hallData?.tables?.find(t => t.id === tableId)?.people?.[chairIndex];

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–µ–ª–æ–≤–µ–∫–∞ –≤ –≥—Ä—É–ø–ø—É
    if (currentPerson && currentPerson.groupId) {
      const updatedGroups = state.groups.map(group => {
        if (group.id === currentPerson.groupId) {
          return {
            ...group,
            members: [...group.members, currentPerson.name]
          };
        }
        return group;
      });

      dispatch({ type: actions.SET_GROUPS, payload: updatedGroups });
      localStorage.setItem('seatingGroups', JSON.stringify(updatedGroups));
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞ —Å–æ —Å—Ç–æ–ª–∞
    const updatedTables = hallData.tables.map(t => {
      if (t.id === tableId) {
        const tablePeople = [...(t.people || [])];
        tablePeople[chairIndex] = null;

        return {
          ...t,
          people: tablePeople
        };
      }
      return t;
    });

    const updatedHallData = {
      ...hallData,
      tables: updatedTables
    };

    dispatch({ type: actions.SET_HALL_DATA, payload: updatedHallData });
    localStorage.setItem('hallData', JSON.stringify(updatedHallData));

    // –°–±—Ä–æ—Å –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    dispatch({ type: actions.RESET_MODALS });
  }, [state, hallData, dispatch, actions]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ drag & drop
  const handleTableDragOver = useCallback((e, tableId) => {
    e.preventDefault();
    e.dataTransfer.dropEffect = 'move';
    dispatch({ type: actions.SET_DRAG_OVER_TABLE, payload: tableId });
  }, [dispatch, actions]);

  const handleTableDragLeave = useCallback((e) => {
    if (!e.currentTarget.contains(e.relatedTarget)) {
      dispatch({ type: actions.SET_DRAG_OVER_TABLE, payload: null });
    }
  }, [dispatch, actions]);

  const handleTableDrop = useCallback((e, tableId) => {
    e.preventDefault();
    dispatch({ type: actions.SET_DRAG_OVER_TABLE, payload: null });

    console.log('handleTableDrop –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è —Å—Ç–æ–ª–∞:', tableId);
    console.log('draggedGroup:', state.draggedGroup);

    if (!state.draggedGroup) return;

    const availableSeatsCount = getAvailableSeats(tableId);

    if (state.draggedGroup.members.length === 0) {
      dispatch({ 
        type: actions.SET_NOTIFICATION, 
        payload: {
          type: 'error',
          message: '–ì—Ä—É–ø–ø–∞ –ø—É—Å—Ç–∞—è!'
        }
      });
      return;
    }

    if (availableSeatsCount === 0) {
      dispatch({ 
        type: actions.SET_NOTIFICATION, 
        payload: {
          type: 'error',
          message: '–ó–∞ —ç—Ç–∏–º —Å—Ç–æ–ª–æ–º –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç!'
        }
      });
      return;
    }

    if (state.draggedGroup.members.length > availableSeatsCount) {
      dispatch({
        type: actions.SET_PENDING_SEATING,
        payload: {
          groupId: state.draggedGroup.id,
          tableId: tableId,
          availableSeats: availableSeatsCount
        }
      });
      dispatch({ type: actions.SET_SELECTED_MEMBERS, payload: [] });
      dispatch({ type: actions.SET_SHOW_MEMBER_SELECTION_MODAL, payload: true });
    } else {
      seatGroupAtTable(state.draggedGroup.id, tableId);
    }
  }, [state.draggedGroup, getAvailableSeats, seatGroupAtTable, dispatch, actions]);

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç–æ–ª–∞ (–≤–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å)
  const toggleTableEnabled = useCallback((tableId) => {
    dispatch({ type: actions.TOGGLE_TABLE_ENABLED, payload: tableId });
  }, [dispatch, actions]);

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç–æ–ª–∞
  const setTableEnabled = useCallback((tableId, enabled) => {
    dispatch({ 
      type: actions.SET_TABLE_ENABLED, 
      payload: { tableId, enabled } 
    });
  }, [dispatch, actions]);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–æ–ª–æ–≤ (—Ç–æ–ª—å–∫–æ –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ)
  const getActiveTables = useCallback(() => {
    if (!hallData?.tables) return [];
    return hallData.tables.filter(table => table.enabled !== false);
  }, [hallData]);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å—Ç–æ–ª–æ–≤
  const getDisabledTables = useCallback(() => {
    if (!hallData?.tables) return [];
    return hallData.tables.filter(table => table.enabled === false);
  }, [hallData]);

  // –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ª—é–¥–µ–π —Å–æ –≤—Å–µ—Ö —Å—Ç–æ–ª–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—Ç –∏—Ö –≤ –≥—Ä—É–ø–ø—ã
  const clearAllTables = useCallback(() => {
    if (!hallData?.tables) return;

    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –ª—é–¥–µ–π —Å–æ –≤—Å–µ—Ö —Å—Ç–æ–ª–æ–≤
    const peopleToReturn = [];
    hallData.tables.forEach(table => {
      if (table.people) {
        table.people.forEach(person => {
          if (person && person.name && person.groupId) {
            peopleToReturn.push({
              name: person.name,
              groupId: person.groupId
            });
          }
        });
      }
    });

    // –û—á–∏—â–∞–µ–º –≤—Å–µ —Å—Ç–æ–ª—ã
    const updatedTables = hallData.tables.map(table => ({
      ...table,
      people: table.people ? table.people.map(() => null) : []
    }));

    const updatedHallData = {
      ...hallData,
      tables: updatedTables
    };

    // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä—É–ø–ø—ã - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ª—é–¥–µ–π –≤ –∏—Ö –≥—Ä—É–ø–ø—ã
    const updatedGroups = state.groups.map(group => {
      const peopleFromThisGroup = peopleToReturn.filter(p => p.groupId === group.id);
      const peopleNames = peopleFromThisGroup.map(p => p.name);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ª—é–¥–µ–π –æ–±—Ä–∞—Ç–Ω–æ –≤ –≥—Ä—É–ø–ø—É, –∏–∑–±–µ–≥–∞—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
      const updatedMembers = [...group.members];
      peopleNames.forEach(name => {
        if (!updatedMembers.includes(name)) {
          updatedMembers.push(name);
        }
      });

      return {
        ...group,
        members: updatedMembers
      };
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    dispatch({ type: actions.SET_HALL_DATA, payload: updatedHallData });
    dispatch({ type: actions.SET_GROUPS, payload: updatedGroups });
    
    localStorage.setItem('hallData', JSON.stringify(updatedHallData));
    localStorage.setItem('seatingGroups', JSON.stringify(updatedGroups));

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–Ω—ã—Ö –ª—é–¥–µ–π
    if (peopleToReturn.length > 0) {
      dispatch({ 
        type: actions.SET_NOTIFICATION, 
        payload: {
          type: 'success',
          message: t('peopleReturnedToGroups').replace('{count}', peopleToReturn.length)
        }
      });
    }
  }, [hallData, state.groups, dispatch, actions]);

  return {
    hallData,
    getAvailableSeats,
    seatGroupAtTable,
    handleChairClick,
    handleTableClick,
    savePerson,
    removePerson,
    handleTableDragOver,
    handleTableDragLeave,
    handleTableDrop,
    toggleTableEnabled,
    setTableEnabled,
    getActiveTables,
    getDisabledTables,
    clearAllTables
  };
}; 