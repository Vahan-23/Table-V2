import React, { useState, useRef, useEffect } from 'react';
import { useDrag } from 'react-dnd';
import { useDrop } from 'react-dnd';

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è drag-and-drop
const ItemTypes = {
    HALL_ELEMENT: 'HALL_ELEMENT',
};

// –ò–∫–æ–Ω–∫–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ Unicode —Å–∏–º–≤–æ–ª—ã, –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å SVG)
const ElementIcons = {
    entrance: 'üö™',
    exit: '‚Ü™Ô∏è',
    stairs: 'üîÉ',
    stage: 'üé≠',
    dj: 'üéß',
    dancefloor: 'üíÉ',
    bar: 'üçπ',
    buffet: 'üçΩÔ∏è',
    wardrobe: 'üß•',
    toilet: 'üöª',
    reception: 'üìã',
    column: 'üèõÔ∏è',
    wall: 'üß±',
    plant: 'üåø',
    vip: '‚≠ê',
    technical: 'üîß',
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ç–∞–ª–æ–≥–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞–ª–∞ (–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Å–∞–π–¥–±–∞—Ä–µ)
export const HallElementsCatalog = ({ onAddElement }) => {
    // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const elementTypes = [
        { id: 'entrance', name: '–í—Ö–æ–¥', icon: ElementIcons.entrance, fontSize: 24 },
        { id: 'exit', name: '–í—ã—Ö–æ–¥', icon: ElementIcons.exit, fontSize: 24 },
        { id: 'stairs', name: '–õ–µ—Å—Ç–Ω–∏—Ü–∞', icon: ElementIcons.stairs, fontSize: 24 },
        { id: 'stage', name: '–°—Ü–µ–Ω–∞', icon: ElementIcons.stage, fontSize: 24 },
        { id: 'dj', name: 'DJ –∑–æ–Ω–∞', icon: ElementIcons.dj, fontSize: 24 },
        { id: 'dancefloor', name: '–¢–∞–Ω—Ü–ø–æ–ª', icon: ElementIcons.dancefloor, fontSize: 24 },
        { id: 'bar', name: '–ë–∞—Ä', icon: ElementIcons.bar, fontSize: 24 },
        { id: 'buffet', name: '–ë—É—Ñ–µ—Ç', icon: ElementIcons.buffet, fontSize: 24 },
        { id: 'wardrobe', name: '–ì–∞—Ä–¥–µ—Ä–æ–±', icon: ElementIcons.wardrobe, fontSize: 24 },
        { id: 'toilet', name: '–¢—É–∞–ª–µ—Ç', icon: ElementIcons.toilet, fontSize: 24 },
        { id: 'reception', name: '–†–µ—Å–µ–ø—à–Ω', icon: ElementIcons.reception, fontSize: 24 },
        { id: 'column', name: '–ö–æ–ª–æ–Ω–Ω–∞', icon: ElementIcons.column, fontSize: 24 },
        { id: 'wall', name: '–°—Ç–µ–Ω–∞', icon: ElementIcons.wall, fontSize: 24 },
        { id: 'plant', name: '–†–∞—Å—Ç–µ–Ω–∏–µ', icon: ElementIcons.plant, fontSize: 24 },
        { id: 'vip', name: 'VIP –∑–æ–Ω–∞', icon: ElementIcons.vip, fontSize: 24 },
        { id: 'technical', name: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ', icon: ElementIcons.technical, fontSize: 24 },
    ];

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏
    const handleAddElement = (elementType) => {
        onAddElement({
            id: Date.now(), // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
            type: elementType.id,
            name: elementType.name,
            icon: elementType.icon,
            fontSize: elementType.fontSize, // –ò—Å–ø–æ–ª—å–∑—É–µ–º fontSize –≤–º–µ—Å—Ç–æ width/height
            x: 100, // –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–æ X
            y: 100, // –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–æ Y
            rotation: 0, // –ù–∞—á–∞–ª—å–Ω—ã–π —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞ (–≤ –≥—Ä–∞–¥—É—Å–∞—Ö)
            customName: elementType.name, // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–µ –∏–º—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–≤–Ω–æ —Ç–∏–ø—É)
            color: '#1e90ff', // –¶–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        });
    };

    // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è)
    const DraggableCatalogItem = ({ elementType }) => {
        const [{ isDragging }, drag] = useDrag({
            type: ItemTypes.HALL_ELEMENT,
            item: () => ({
                type: elementType.id,
                elementData: elementType,
            }),
            end: (item, monitor) => {
                // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Ç–∞—â–µ–Ω –≤ –∑–æ–Ω—É –∑–∞–ª–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            },
            collect: (monitor) => ({
                isDragging: monitor.isDragging(),
            }),
        });

        return (
            <div
                ref={drag}
                className="hall-element-catalog-item"
                style={{
                    opacity: isDragging ? 0.5 : 1,
                    cursor: 'move',
                    padding: '8px',
                    margin: '5px',
                    border: '1px solid #ddd',
                    borderRadius: '4px',
                    display: 'flex',
                    alignItems: 'center',
                    backgroundColor: 'white',
                    boxShadow: '0 1px 3px rgba(0,0,0,0.1)',
                }}
            >
                <div className="element-icon" style={{ fontSize: '24px', marginRight: '10px' }}>
                    {elementType.icon}
                </div>
                <div className="element-name">{elementType.name}</div>
            </div>
        );
    };

    return (
        <div className="hall-elements-catalog">
            <h3 className="catalog-title">–≠–ª–µ–º–µ–Ω—Ç—ã –∑–∞–ª–∞</h3>
            <div className="catalog-items">
                {elementTypes.map((elementType) => (
                    <DraggableCatalogItem key={elementType.id} elementType={elementType} />
                ))}
            </div>
        </div>
    );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∑–∞–ª–∞ –Ω–∞ —Ö–æ–ª—Å—Ç–µ
export const HallElement = ({
    element,
    selected,
    onSelect,
    onUpdate,
    onDelete,
    zoom,
}) => {
    const [isEditing, setIsEditing] = useState(false);
    const [editName, setEditName] = useState(element.customName);
    const [isDragging, setIsDragging] = useState(false);
    const [dragStart, setDragStart] = useState({ x: 0, y: 0 });
    const [isResizing, setIsResizing] = useState(false);
    const [resizeDirection, setResizeDirection] = useState('');
    const elementRef = useRef(null);
    const wasDragged = useRef(false);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
    const handleMouseDown = (e) => {
        e.stopPropagation();
        setIsDragging(true);
        wasDragged.current = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        setDragStart({
            x: e.clientX,
            y: e.clientY,
        });
    };

    const handleMouseMove = (e) => {
        if (isDragging && !isResizing) {
            const dx = e.clientX - dragStart.x;
            const dy = e.clientY - dragStart.y;

            // –ï—Å–ª–∏ –±—ã–ª–æ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ, —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ–º
            if (Math.abs(dx) > 3 || Math.abs(dy) > 3) {
                wasDragged.current = true;
            }

            onUpdate({
                ...element,
                x: element.x + (dx / zoom),
                y: element.y + (dy / zoom),
            });

            setDragStart({
                x: e.clientX,
                y: e.clientY,
            });
        } else if (isResizing) {
            wasDragged.current = true; // –†–µ—Å–∞–π–∑ - —ç—Ç–æ —Ç–æ–∂–µ —Å–≤–æ–µ–≥–æ —Ä–æ–¥–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ
            
            // –ò–∑–º–µ–Ω—è–µ–º –ª–æ–≥–∏–∫—É —Ä–µ—Å–∞–π–∑–∞: —Ç–µ–ø–µ—Ä—å –º–µ–Ω—è–µ–º fontSize –≤–º–µ—Å—Ç–æ width/height
            const dx = (e.clientX - dragStart.x) / zoom;
            
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞
            // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 0.8 –¥–µ–ª–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–æ–ª–µ–µ –∑–∞–º–µ—Ç–Ω—ã–º
            const fontSizeChange = dx * 0.8;
            let newFontSize = element.fontSize;
            
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–∏ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏–∏ –≤–ø—Ä–∞–≤–æ, —É–º–µ–Ω—å—à–∞–µ–º –ø—Ä–∏ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏–∏ –≤–ª–µ–≤–æ
            if (resizeDirection.includes('right')) {
                newFontSize = Math.max(10, element.fontSize + fontSizeChange);
            } else if (resizeDirection.includes('left')) {
                newFontSize = Math.max(10, element.fontSize - fontSizeChange);
            }
            
            // –¢–∞–∫–∂–µ –º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –ø—Ä–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–º —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏–∏ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–π —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
            if (resizeDirection.includes('bottom') || resizeDirection.includes('top')) {
                const dy = (e.clientY - dragStart.y) / zoom;
                const verticalFontSizeChange = dy * 0.8; // –¢–æ—Ç –∂–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                
                if (resizeDirection.includes('bottom')) {
                    newFontSize = Math.max(10, newFontSize + verticalFontSizeChange);
                } else if (resizeDirection.includes('top')) {
                    newFontSize = Math.max(10, newFontSize - verticalFontSizeChange);
                }
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å –Ω–æ–≤—ã–º —Ä–∞–∑–º–µ—Ä–æ–º —à—Ä–∏—Ñ—Ç–∞
            onUpdate({
                ...element,
                fontSize: newFontSize,
            });

            setDragStart({
                x: e.clientX,
                y: e.clientY,
            });
        }
    };

    const handleMouseUp = () => {
        // –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –º—ã—à–∏ –æ—Ç–ø—É—â–µ–Ω–∞, –∏ –ù–ï –±—ã–ª–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –∫–ª–∏–∫
        if (isDragging && !wasDragged.current) {
            onSelect(element.id); // –í—ã–∑—ã–≤–∞–µ–º onSelect (setSelectedElementId) —Ç–æ–ª—å–∫–æ –∑–¥–µ—Å—å
        }
        setIsDragging(false);
        setIsResizing(false);
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        wasDragged.current = false;
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
    const handleResizeStart = (e, direction) => {
        e.stopPropagation();
        setIsResizing(true);
        setResizeDirection(direction);
        setDragStart({
            x: e.clientX,
            y: e.clientY,
        });
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
    const handleDoubleClick = (e) => {
        e.stopPropagation();
        setIsEditing(true);
        setEditName(element.customName);
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏
    const handleNameChange = (e) => {
        setEditName(e.target.value);
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏
    const handleNameSave = () => {
        onUpdate({
            ...element,
            customName: editName,
        });
        setIsEditing(false);
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è Enter –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    const handleKeyPress = (e) => {
        if (e.key === 'Enter') {
            handleNameSave();
        }
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–≤–æ—Ä–æ—Ç–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
    const handleRotate = (clockwise = true) => {
        const newRotation = element.rotation + (clockwise ? 90 : -90);
        onUpdate({
            ...element,
            rotation: newRotation % 360,
        });
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
    const handleDelete = (e) => {
        e.stopPropagation();
        onDelete(element.id);
    };

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫ window –ø—Ä–∏ dragging/resizing
    React.useEffect(() => {
        if (isDragging || isResizing) {
            window.addEventListener('mousemove', handleMouseMove);
            window.addEventListener('mouseup', handleMouseUp); // handleMouseUp —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏ –∫–ª–∏–∫, –∏ –∫–æ–Ω–µ—Ü –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
            return () => {
                window.removeEventListener('mousemove', handleMouseMove);
                window.removeEventListener('mouseup', handleMouseUp);
            };
        }
    }, [isDragging, isResizing, dragStart, zoom]); // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏


    return (
        <div
            ref={elementRef}
            className={`hall-element ${selected ? 'selected' : ''}`}
            style={{
                position: 'absolute',
                left: `${element.x}px`,
                top: `${element.y}px`,
                padding: '10px', // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–¥–¥–∏–Ω–≥ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
                transform: `rotate(${element.rotation}deg)`,
                backgroundColor: 'transparent', // –î–µ–ª–∞–µ–º —Ñ–æ–Ω –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º
                display: 'flex',
                flexDirection: 'column',
                alignItems: 'center',
                justifyContent: 'center',
                border: selected ? '2px solid #2196F3' : '1px dashed rgba(170, 170, 170, 0.5)', // –î–µ–ª–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—É –±–æ–ª–µ–µ –ª–µ–≥–∫–æ–π
                borderRadius: '4px',
                cursor: isDragging ? 'grabbing' : 'grab',
                userSelect: 'none',
                zIndex: selected ? 1000 : element.zIndex || 1,
                boxShadow: 'none', // –£–±–∏—Ä–∞–µ–º —Ç–µ–Ω—å
                opacity: element.opacity || 1,
            }}
            onMouseDown={handleMouseDown}
            onDoubleClick={handleDoubleClick}
        >
            <div
                className="element-icon"
                style={{
                    fontSize: `${element.fontSize}px`, // –ò—Å–ø–æ–ª—å–∑—É–µ–º fontSize –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ –∏–∫–æ–Ω–∫–∏
                    marginBottom: '5px',
                }}
            >
                {element.icon}
            </div>

            {isEditing ? (
                <input
                    type="text"
                    value={editName}
                    onChange={handleNameChange}
                    onBlur={handleNameSave}
                    onKeyPress={handleKeyPress}
                    onClick={(e) => e.stopPropagation()}
                    autoFocus
                    style={{
                        width: '90%',
                        textAlign: 'center',
                        border: '1px solid #ccc',
                        borderRadius: '2px',
                        padding: '2px',
                        fontSize: `${Math.max(12, element.fontSize / 2)}px`, // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è –∏–º–µ–Ω–∏
                    }}
                />
            ) : (
                <div className="element-name" style={{ 
                    fontSize: `${Math.max(12, element.fontSize / 2)}px`, // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è –∏–º–µ–Ω–∏
                    textAlign: 'center' 
                }}>
                    {element.customName}
                </div>
            )}

            {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã–¥–µ–ª–µ–Ω–∏–∏) */}
            {selected && (
                <div className="element-controls" style={{
                    position: 'absolute',
                    top: `-${Math.max(30, element.fontSize * 0.6)}px`,
                    left: '0',
                    right: '0',
                    display: 'flex',
                    justifyContent: 'center',
                    gap: '5px'
                }}>
                    <button
                        onClick={(e) => {
                            e.stopPropagation();
                            handleRotate(false);
                        }}
                        style={{
                            border: 'none',
                            background: '#fff',
                            borderRadius: '50%',
                            width: `${Math.max(24, element.fontSize * 0.5)}px`,
                            height: `${Math.max(24, element.fontSize * 0.5)}px`,
                            display: 'flex',
                            alignItems: 'center',
                            justifyContent: 'center',
                            cursor: 'pointer',
                            boxShadow: '0 1px 3px rgba(0,0,0,0.2)',
                            fontSize: `${Math.max(16, element.fontSize * 0.3)}px`
                        }}
                    >
                        ‚Ü∫
                    </button>
                    <button
                        onClick={(e) => {
                            e.stopPropagation();
                            handleRotate(true);
                        }}
                        style={{
                            border: 'none',
                            background: '#fff',
                            borderRadius: '50%',
                            width: `${Math.max(24, element.fontSize * 0.5)}px`,
                            height: `${Math.max(24, element.fontSize * 0.5)}px`,
                            display: 'flex',
                            alignItems: 'center',
                            justifyContent: 'center',
                            cursor: 'pointer',
                            boxShadow: '0 1px 3px rgba(0,0,0,0.2)',
                            fontSize: `${Math.max(16, element.fontSize * 0.3)}px`
                        }}
                    >
                        ‚Üª
                    </button>
                    <button
                        onClick={handleDelete}
                        style={{
                            border: 'none',
                            background: '#f44336',
                            color: 'white',
                            borderRadius: '50%',
                            width: `${Math.max(24, element.fontSize * 0.5)}px`,
                            height: `${Math.max(24, element.fontSize * 0.5)}px`,
                            display: 'flex',
                            alignItems: 'center',
                            justifyContent: 'center',
                            cursor: 'pointer',
                            boxShadow: '0 1px 3px rgba(0,0,0,0.2)',
                            fontSize: `${Math.max(16, element.fontSize * 0.3)}px`
                        }}
                    >
                        ‚úï
                    </button>
                </div>
            )}

            {/* –ú–∞—Ä–∫–µ—Ä—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ (–æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã–¥–µ–ª–µ–Ω–∏–∏) */}
            {selected && (
                <>
                    <div
                        className="resize-handle top-left"
                        style={{
                            position: 'absolute',
                            top: '-5px',
                            left: '-5px',
                            width: `${Math.max(10, element.fontSize * 0.2)}px`,
                            height: `${Math.max(10, element.fontSize * 0.2)}px`,
                            backgroundColor: '#2196F3',
                            borderRadius: '50%',
                            cursor: 'nwse-resize',
                        }}
                        onMouseDown={(e) => handleResizeStart(e, 'top-left')}
                    ></div>
                    <div
                        className="resize-handle top-right"
                        style={{
                            position: 'absolute',
                            top: '-5px',
                            right: '-5px',
                            width: `${Math.max(10, element.fontSize * 0.2)}px`,
                            height: `${Math.max(10, element.fontSize * 0.2)}px`,
                            backgroundColor: '#2196F3',
                            borderRadius: '50%',
                            cursor: 'nesw-resize',
                        }}
                        onMouseDown={(e) => handleResizeStart(e, 'top-right')}
                    ></div>
                    <div
                        className="resize-handle bottom-left"
                        style={{
                            position: 'absolute',
                            bottom: '-5px',
                            left: '-5px',
                            width: `${Math.max(10, element.fontSize * 0.2)}px`,
                            height: `${Math.max(10, element.fontSize * 0.2)}px`,
                            backgroundColor: '#2196F3',
                            borderRadius: '50%',
                            cursor: 'nesw-resize',
                        }}
                        onMouseDown={(e) => handleResizeStart(e, 'bottom-left')}
                    ></div>
                    <div
                        className="resize-handle bottom-right"
                        style={{
                            position: 'absolute',
                            bottom: '-5px',
                            right: '-5px',
                            width: `${Math.max(10, element.fontSize * 0.2)}px`,
                            height: `${Math.max(10, element.fontSize * 0.2)}px`,
                            backgroundColor: '#2196F3',
                            borderRadius: '50%',
                            cursor: 'nwse-resize',
                        }}
                        onMouseDown={(e) => handleResizeStart(e, 'bottom-right')}
                    ></div>
                </>
            )}
        </div>
    );
};

// –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∑–∞–ª–∞
export const HallElementsManager = ({
    tablesAreaRef,
    zoom,
    elements,
    setElements,
    selectedElementId,
    setSelectedElementId,
    activeMode
}) => {
    const [, drop] = useDrop({
        accept: ItemTypes.HALL_ELEMENT,
        drop: (item, monitor) => {
            console.log("Drop event detected!", item); // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ª–æ–≥

            const offset = monitor.getClientOffset();
            if (offset && tablesAreaRef.current) {
                const containerRect = tablesAreaRef.current.getBoundingClientRect();
                const x = (offset.x - containerRect.left + tablesAreaRef.current.scrollLeft) / zoom;
                const y = (offset.y - containerRect.top + tablesAreaRef.current.scrollTop) / zoom;

                console.log("Calculated position:", x, y); // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ª–æ–≥

                // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π
                const elementData = item.elementData;
                const newElement = {
                    id: Date.now(),
                    type: elementData.id,
                    name: elementData.name,
                    icon: elementData.icon,
                    fontSize: elementData.fontSize, // –ó–∞–º–µ–Ω—è–µ–º width/height –Ω–∞ fontSize
                    x: x, // –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –ø–æ –∫—É—Ä—Å–æ—Ä—É
                    y: y,
                    rotation: 0,
                    customName: elementData.name,
                    color: 'transparent', // –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                };

                console.log("Adding new element:", newElement); // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ª–æ–≥

                // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç
                setElements(prevElements => [...prevElements, newElement]);
                setSelectedElementId(newElement.id);
            }

            return { success: true };
        }
    });

    useEffect(() => {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º ref drop –∫ tablesAreaRef.current –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        if (tablesAreaRef.current) {
            drop(tablesAreaRef.current);
            console.log("Drop ref applied to canvas"); // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ª–æ–≥
        }

        // –≠—Ç–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        return () => {
            drop(null); // –£–±–∏—Ä–∞–µ–º –ø—Ä–∏–≤—è–∑–∫—É ref
        };
    }, [drop, tablesAreaRef]); // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è useEffect
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    const handleAddElement = (element) => {
        setElements((prevElements) => [...prevElements, element]);
        setSelectedElementId(element.id);
    };

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
    const handleUpdateElement = (updatedElement) => {
        setElements((prevElements) =>
            prevElements.map((el) =>
                el.id === updatedElement.id ? updatedElement : el
            )
        );
    };

    // –£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
    const handleDeleteElement = (elementId) => {
        setElements((prevElements) =>
            prevElements.filter((el) => el.id !== elementId)
        );
        if (selectedElementId === elementId) {
            setSelectedElementId(null);
        }
    };

    // –°–Ω—è—Ç–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –ø—É—Å—Ç—É—é –æ–±–ª–∞—Å—Ç—å
    const handleAreaClick = () => {
        setSelectedElementId(null);
    };

    return (
        <>
            {/* –ü—Ä–∏–º–µ–Ω—è–µ–º drop –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É —á–µ—Ä–µ–∑ ref –∏–∑ props */}
            <div
                ref={drop}
                className="hall-elements-layer"
                onClick={handleAreaClick}
                style={{
                    position: 'absolute',
                    top: 0,
                    left: 0,
                    right: 0,
                    bottom: 0,
                    pointerEvents: 'none'
                }}
            />

            {/* –†–µ–Ω–¥–µ—Ä–∏–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞–ª–∞ */}
            {elements.map((element) => (
                <HallElement
                    key={element.id}
                    element={element}
                    selected={selectedElementId === element.id}
                    onSelect={setSelectedElementId}
                    onUpdate={handleUpdateElement}
                    onDelete={handleDeleteElement}
                    zoom={zoom}
                />
            ))}
        </>
    );
};

export default HallElementsManager;